AWSTemplateFormatVersion: "2010-09-09"
Description: EKSCluster Roles

Parameters:
  ApplicationName:
    Type: String
    Description: Name of the application using the deployed infrastructure
    Default: MyApp-services

  oidcArn:
    Type: String
  oidcUrl:
    Type: String
  usecase:
    Description: What is the use case?
    Type: String
    AllowedValues:
      - "prod"
      - "stage"
      - "dev"
      - "loadtest"
      - "dr"
      - "qa"

Resources:
  eksEBSCSIDriverRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub MyApp-EKS-${usecase}-${AWS::Region}-EBS_CSI_Driver_Role
      Description: >-
        The Amazon Elastic Block Store (Amazon EBS) Container Storage Interface (CSI) driver provides a CSI interface
        that allows Amazon Elastic Kubernetes Service (Amazon EKS) clusters to manage the lifecycle of Amazon EBS volumes
        for persistent volumes.
      AssumeRolePolicyDocument:
        "Fn::Sub": |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Principal": {
                    "Federated": "${oidcArn}"
                    },
                "Condition": {
                  "StringEquals": {
                    "${oidcUrl}:sub": "system:serviceaccount:kube-system:ebs-csi-controller-sa"
                  }
                }
              }
            ]
          }
      Policies:
        - PolicyName: AmazonEKS_EBS_CSI_Driver_Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:CreateSnapshot"
                  - "ec2:AttachVolume"
                  - "ec2:DetachVolume"
                  - "ec2:ModifyVolume"
                  - "ec2:DescribeAvailabilityZones"
                  - "ec2:DescribeInstances"
                  - "ec2:DescribeSnapshots"
                  - "ec2:DescribeTags"
                  - "ec2:DescribeVolumes"
                  - "ec2:DescribeVolumesModifications"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "ec2:CreateTags"
                Resource:
                  - "arn:aws:ec2:*:*:volume/*"
                  - "arn:aws:ec2:*:*:snapshot/*"
                Condition:
                  StringEquals:
                    "ec2:CreateAction":
                      - CreateVolume
                      - CreateSnapshot
              - Effect: Allow
                Action:
                  - "ec2:DeleteTags"
                Resource:
                  - "arn:aws:ec2:*:*:volume/*"
                  - "arn:aws:ec2:*:*:snapshot/*"
              - Effect: Allow
                Action:
                  - "ec2:CreateVolume"
                Resource: "*"
                Condition:
                  StringLike:
                    "aws:RequestTag/ebs.csi.aws.com/cluster": "true"
              - Effect: Allow
                Action:
                  - "ec2:CreateVolume"
                Resource: "*"
                Condition:
                  StringLike:
                    "aws:RequestTag/CSIVolumeName": "*"
              - Effect: Allow
                Action:
                  - "ec2:DeleteVolume"
                Resource: "*"
                Condition:
                  StringLike:
                    "ec2:ResourceTag/CSIVolumeName": "*"
              - Effect: Allow
                Action:
                  - "ec2:DeleteVolume"
                Resource: "*"
                Condition:
                  StringLike:
                    "ec2:ResourceTag/ebs.csi.aws.com/cluster": "true"
              - Effect: Allow
                Action:
                  - "ec2:DeleteSnapshot"
                Resource: "*"
                Condition:
                  StringLike:
                    "ec2:ResourceTag/CSIVolumeSnapshotName": "*"
              - Effect: Allow
                Action:
                  - "ec2:DeleteSnapshot"
                Resource: "*"
                Condition:
                  StringLike:
                    "ec2:ResourceTag/ebs.csi.aws.com/cluster": "true"
      Tags:
        - Key: service
          Value: eks
        - Key: App
          Value: MyApp
        - Key: Env
          Value: !Ref usecase
        - Key: Department
          Value: Engineering
        - Key: Region
          Value: !Ref "AWS::Region"

  eksEFSCSIDriverRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub MyApp-EKS-${usecase}-${AWS::Region}-EFS_CSI_Driver_Role
      Description: >-
        The Amazon Elastic File System Container Storage Interface (CSI) Driver implements the CSI specification for container
        orchestrators to manage the lifecycle of Amazon EFS file systems.
      AssumeRolePolicyDocument:
        "Fn::Sub": |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Principal": {
                    "Federated": "${oidcArn}"
                    },
                "Condition": {
                  "StringEquals": {
                    "${oidcUrl}:sub": "system:serviceaccount:kube-system:efs-csi-controller-sa"
                  }
                }
              }
            ]
          }
      Policies:
        - PolicyName: AmazonEKS_EFS_CSI_Driver_Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "elasticfilesystem:DescribeAccessPoints"
                  - "elasticfilesystem:DescribeFileSystems"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "elasticfilesystem:CreateAccessPoint"
                Resource: "*"
                Condition:
                  StringLike:
                    "aws:RequestTag/efs.csi.aws.com/cluster": "true"
              - Effect: Allow
                Action: "elasticfilesystem:DeleteAccessPoint"
                Resource: "*"
                Condition:
                  StringEquals:
                    "aws:ResourceTag/efs.csi.aws.com/cluster": "true"
      Tags:
        - Key: service
          Value: eks
        - Key: App
          Value: MyApp
        - Key: Env
          Value: !Ref usecase
        - Key: Department
          Value: Engineering
        - Key: Region
          Value: !Ref "AWS::Region"

  eksExternalDNSRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub MyApp-EKS-${usecase}-${AWS::Region}-ExternalDNSRole
      Description: >-
        MyApp EKS External DNS
      AssumeRolePolicyDocument:
        "Fn::Sub": |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Principal": {
                    "Federated": "${oidcArn}"
                    },
                "Condition": {
                  "StringEquals": {
                    "${oidcUrl}:sub": "system:serviceaccount:external-dns:external-dns-sa"
                  }
                }
              }
            ]
          }
      Policies:
        - PolicyName: AWSEKS_External_DNSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets
                Resource:
                  - arn:aws:route53:::hostedzone/*
              - Effect: Allow
                Action:
                  - route53:ListHostedZones
                  - route53:ListResourceRecordSets
                Resource:
                  - "*"
      Tags:
        - Key: service
          Value: eks
        - Key: App
          Value: MyApp
        - Key: Env
          Value: !Ref usecase
        - Key: Department
          Value: Engineering
        - Key: Region
          Value: !Ref "AWS::Region"

  eksLBControllerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub MyApp-EKS-${usecase}-${AWS::Region}-ALBControllerRole
      Description: Role for EKS to access Load Balancer, Subnets, and create load balancers in Kubernetes
      AssumeRolePolicyDocument:
        "Fn::Sub": |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Principal": {
                    "Federated": "${oidcArn}"
                    },
                "Condition": {
                  "StringEquals": {
                    "${oidcUrl}:aud": "sts.amazonaws.com",
                    "${oidcUrl}:sub": "system:serviceaccount:kube-system:aws-load-balancer-controller"
                  }
                }
              }
            ]
          }
      Policies:
        - PolicyName: AWSLoadBalancerControllerIAMPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "iam:CreateServiceLinkedRole"
                  - "ec2:DescribeAccountAttributes"
                  - "ec2:DescribeAddresses"
                  - "ec2:DescribeAvailabilityZones"
                  - "ec2:DescribeInternetGateways"
                  - "ec2:DescribeVpcs"
                  - "ec2:DescribeSubnets"
                  - "ec2:DescribeSecurityGroups"
                  - "ec2:DescribeInstances"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DescribeTags"
                  - "ec2:GetCoipPoolUsage"
                  - "ec2:DescribeCoipPools"
                  - "elasticloadbalancing:DescribeLoadBalancers"
                  - "elasticloadbalancing:DescribeLoadBalancerAttributes"
                  - "elasticloadbalancing:DescribeListeners"
                  - "elasticloadbalancing:DescribeListenerCertificates"
                  - "elasticloadbalancing:DescribeSSLPolicies"
                  - "elasticloadbalancing:DescribeRules"
                  - "elasticloadbalancing:DescribeTargetGroups"
                  - "elasticloadbalancing:DescribeTargetGroupAttributes"
                  - "elasticloadbalancing:DescribeTargetHealth"
                  - "elasticloadbalancing:DescribeTags"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "cognito-idp:DescribeUserPoolClient"
                  - "acm:ListCertificates"
                  - "acm:DescribeCertificate"
                  - "iam:ListServerCertificates"
                  - "iam:GetServerCertificate"
                  - "waf-regional:GetWebACL"
                  - "waf-regional:GetWebACLForResource"
                  - "waf-regional:AssociateWebACL"
                  - "waf-regional:DisassociateWebACL"
                  - "wafv2:GetWebACL"
                  - "wafv2:GetWebACLForResource"
                  - "wafv2:AssociateWebACL"
                  - "wafv2:DisassociateWebACL"
                  - "shield:GetSubscriptionState"
                  - "shield:DescribeProtection"
                  - "shield:CreateProtection"
                  - "shield:DeleteProtection"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "ec2:AuthorizeSecurityGroupIngress"
                  - "ec2:RevokeSecurityGroupIngress"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "ec2:CreateSecurityGroup"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "ec2:CreateTags"
                Resource: "arn:aws:ec2:*:*:security-group/*"
                Condition:
                  StringEquals:
                    "ec2:CreateAction": CreateSecurityGroup
                  "Null":
                    "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
              - Effect: Allow
                Action:
                  - "ec2:CreateTags"
                  - "ec2:DeleteTags"
                Resource: "arn:aws:ec2:*:*:security-group/*"
                Condition:
                  "Null":
                    "aws:RequestTag/elbv2.k8s.aws/cluster": "true"
                    "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
              - Effect: Allow
                Action:
                  - "ec2:AuthorizeSecurityGroupIngress"
                  - "ec2:RevokeSecurityGroupIngress"
                  - "ec2:DeleteSecurityGroup"
                Resource: "*"
                Condition:
                  "Null":
                    "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
              - Effect: Allow
                Action:
                  - "elasticloadbalancing:CreateLoadBalancer"
                  - "elasticloadbalancing:CreateTargetGroup"
                Resource: "*"
                Condition:
                  "Null":
                    "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
              - Effect: Allow
                Action:
                  - "elasticloadbalancing:CreateListener"
                  - "elasticloadbalancing:DeleteListener"
                  - "elasticloadbalancing:CreateRule"
                  - "elasticloadbalancing:DeleteRule"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "elasticloadbalancing:AddTags"
                  - "elasticloadbalancing:RemoveTags"
                Resource:
                  - "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*"
                  - "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*"
                  - "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*"
                Condition:
                  "Null":
                    "aws:RequestTag/elbv2.k8s.aws/cluster": "true"
                    "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
              - Effect: Allow
                Action:
                  - "elasticloadbalancing:AddTags"
                  - "elasticloadbalancing:RemoveTags"
                Resource:
                  - "arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*"
                  - "arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*"
                  - "arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*"
                  - "arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*"
              - Effect: Allow
                Action:
                  - "elasticloadbalancing:ModifyLoadBalancerAttributes"
                  - "elasticloadbalancing:SetIpAddressType"
                  - "elasticloadbalancing:SetSecurityGroups"
                  - "elasticloadbalancing:SetSubnets"
                  - "elasticloadbalancing:DeleteLoadBalancer"
                  - "elasticloadbalancing:ModifyTargetGroup"
                  - "elasticloadbalancing:ModifyTargetGroupAttributes"
                  - "elasticloadbalancing:DeleteTargetGroup"
                Resource: "*"
                Condition:
                  "Null":
                    "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
              - Effect: Allow
                Action:
                  - "elasticloadbalancing:RegisterTargets"
                  - "elasticloadbalancing:DeregisterTargets"
                Resource: "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*"
              - Effect: Allow
                Action:
                  - "elasticloadbalancing:SetWebAcl"
                  - "elasticloadbalancing:ModifyListener"
                  - "elasticloadbalancing:AddListenerCertificates"
                  - "elasticloadbalancing:RemoveListenerCertificates"
                  - "elasticloadbalancing:ModifyRule"
                Resource: "*"
      Tags:
        - Key: service
          Value: eks
        - Key: App
          Value: MyApp
        - Key: Env
          Value: !Ref usecase
        - Key: Department
          Value: Engineering
        - Key: Region
          Value: !Ref "AWS::Region"

  eksSecretsManagerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub MyApp-EKS-${usecase}-${AWS::Region}-SecretsManagerRole
      Description: Role for EKS to access AWS Secrets Manager and create secrets in Kubernetes
      AssumeRolePolicyDocument:
        "Fn::Sub": |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Principal": {
                    "Federated": "${oidcArn}"
                    },
                "Condition": {
                  "StringEquals": {
                    "${oidcUrl}:sub": "system:serviceaccount:external-secrets:external-secrets-kubernetes-external-secrets"
                  }
                }
              }
            ]
          }
      Policies:
        - PolicyName: SecretsManagerPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetResourcePolicy"
                  - "secretsmanager:ListSecretVersionIds"
                  - "secretsmanager:ListSecrets"
                  - "ssm:GetParameter"
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - "secretsmanager:Get*"
                Resource:
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:MyApp-EKS-${usecase}/*"
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:MyApp/*"
      Tags:
        - Key: service
          Value: eks
        - Key: App
          Value: MyApp
        - Key: Env
          Value: !Ref usecase
        - Key: Department
          Value: Engineering
        - Key: Region
          Value: !Ref "AWS::Region"

  eksA3AccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub MyApp-EKS-${usecase}-${AWS::Region}-service-account
      AssumeRolePolicyDocument:
        "Fn::Sub": |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Principal": {
                    "Federated": "${oidcArn}"
                    },
                "Condition": {
                  "StringEquals": {
                    "${oidcUrl}:sub": "system:serviceaccount:MyApp:MyApp-service"
                  }
                }
              }
            ]
          }
      Tags:
        - Key: service
          Value: eks
        - Key: App
          Value: MyApp
        - Key: Env
          Value: !Ref usecase
        - Key: Department
          Value: Engineering
        - Key: Region
          Value: !Ref "AWS::Region"
  DataDogAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub MyApp-EKS-${usecase}-${AWS::Region}-datadog-service-account
      AssumeRolePolicyDocument:
        "Fn::Sub": |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Principal": {
                    "Federated": "${oidcArn}"
                    },
                "Condition": {
                  "StringEquals": {
                    "${oidcUrl}:sub": "system:serviceaccount:*:datadog-agent"
                  }
                }
              }
            ]
          }
      Tags:
        - Key: service
          Value: eks
        - Key: App
          Value: MyApp
        - Key: Env
          Value: !Ref usecase
        - Key: Department
          Value: Engineering
        - Key: Region
          Value: !Ref "AWS::Region"

  S3AccessPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: S3Permissions
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: S3AttachmentPolicy
            Effect: Allow
            Action:
              - "s3:AbortMultipartUpload"
              - "s3:DeleteObject"
              - "s3:DeleteObjectTagging"
              - "s3:DeleteObjectVersion"
              - "s3:DeleteObjectVersionTagging"
              - "s3:Get*"
              - "s3:PutObject"
              - "s3:PutObjectTagging"
              - "s3:RestoreObject"
              - "s3:ListMultipartUploadParts"
              - "s3:ListBucket"
            Resource:
              - !Sub "arn:aws:s3:::${ApplicationName}-${usecase}-us-east-1-${AWS::AccountId}"
              - !Sub "arn:aws:s3:::${ApplicationName}-${usecase}-us-west-2-${AWS::AccountId}"
              - !Sub "arn:aws:s3:::${ApplicationName}-${usecase}-eu-west-1-${AWS::AccountId}"
              - !Sub "arn:aws:s3:::${ApplicationName}-${usecase}-ap-southeast-2-${AWS::AccountId}"
      Roles:
        - !Ref eksA3AccessRole

  SQSAccessRole:
    Type: "AWS::IAM::Policy"
    # Condition: notProd
    Properties:
      PolicyName: QtestLiteSQSPermissions
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowSQSPermissions
            Effect: Allow
            Action:
              - sqs:GetQueueUrl
              - sqs:ListDeadLetterSourceQueues
              - sqs:ReceiveMessage
              - sqs:SendMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:ListQueueTags
              - sqs:SetQueueAttributes
              - sqs:ListQueues
            Resource:
              - !Sub "arn:aws:sqs:*:${AWS::AccountId}:qtest-lite-*"
              - !Sub "arn:aws:sqs:*:${AWS::AccountId}:MyApp*"
      Roles:
        - !Ref eksA3AccessRole

Outputs:
  EBSCSIDriverRoleARN:
    Value: !GetAtt eksEBSCSIDriverRole.Arn
    Description: EKS EBS CSI Driver Role ARN
  EFSCSIDriverRoleARN:
    Value: !GetAtt eksEFSCSIDriverRole.Arn
    Description: EKS EFS CSI Driver Role ARN
  ExternalDNSRoleARN:
    Value: !GetAtt eksExternalDNSRole.Arn
    Description: EKS External DNS Role ARN
  LBControllerRoleARN:
    Value: !GetAtt eksLBControllerRole.Arn
    Description: EKS LB Controller Role ARN
  SecretsManagerRoleARN:
    Value: !GetAtt eksSecretsManagerRole.Arn
    Description: Secrets Manager Role ARN
  EksA3AccessRole:
    Value: !GetAtt eksA3AccessRole.Arn
    Description: Acccess to S3Bucket from EKS
