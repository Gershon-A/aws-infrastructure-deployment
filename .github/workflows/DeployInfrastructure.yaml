# https://dev.to/efrenmercadojr/localstack-s3-in-github-actions-31c1
name: Deploy Infrastructure

on:
  push:
    branches:
      - 'main' # Development
      - 'release/**' # Staging
  #     - 'matrix' # Testing
  pull_request:
    types: [opened, synchronize, reopened]
  release: # Production
    types: [published]
  workflow_dispatch:


jobs:
  get-environment:
    name: Get Environment
    uses: ./.github/workflows/get-environment.yaml

  Deployment:
      runs-on: ubuntu-latest
      needs: [ get-environment ]
      # Must explicitly state ENVIRONMENT to inherit SECRETS from caller workflow
      environment:  ${{ needs.get-environment.outputs.deployment-environment }}
      # Map the job outputs to step outputs
      strategy:
        matrix:
          arrays: [
            { stack-name: "MyApp-TestS3",         template: "Templates/test-s3.yaml",         parameter-file: "TestS3" },
            { stack-name: "MyApp-GlobalRoles",    template: "Templates/01-GlobalRoles.yaml",  parameter-file: "GlobalRoles" },
            { stack-name: "MyApp-VPC",            template: "Templates/03-VPC.yaml",          parameter-file: "VPC" },
            { stack-name: "MyApp-EKSCluster",     template: "Templates/04-EKSCluster.yaml",   parameter-file: "EKSCluster" },
          ]

        fail-fast: true  # When set to true, GitHub cancels all in-progress jobs if any matrix job fails.
        max-parallel: 1  # The maximum number of jobs that can run simultaneously. Need that for sequential matrix deployments execution.
      # Must to be specify. Otherwise: "Could not load credentials from any providers"
      permissions:
        id-token: write
        contents: read

      env:
        STACK_NAME:         ${{ matrix.arrays.stack-name }}
        TEMPLATE_FILE:      "file://${{ matrix.arrays.template }}"
        PARAMETERS_FILE:    "file://TemplateConfigs/${{ vars.USECASE }}-${{  matrix.arrays.parameter-file }}-${{ vars.AWS_DEFAULT_REGION }}.json"
        AWS_REGION:         ${{ vars.AWS_DEFAULT_REGION }}
        PARAMETER_OVERRIDE: "usecase=${{ vars.USECASE }}"
        CAPABILITIES:       'CAPABILITY_AUTO_EXPAND,CAPABILITY_NAMED_IAM'
        #  (IAM) role that CloudFormation assumes to create the stack.
        ROLE_ARN:           "${{ secrets.AWS_CFN_ROLE_TO_ASSUME }}"
        TAGS:               "Service=my-service Env=${{ vars.USECASE }}"

      steps:
        - name: Install aws-cli
          id: install-aws-cli
          uses: unfor19/install-aws-cli-action@v1
          with:
            version: 2     # default
            verbose: false # default
            arch: amd64    # allowed values: amd64, arm64
            rootdir: ""    # defaults to "PWD"
            workdir: ""    # defaults to "PWD/unfor19-awscli"

        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v1-node16
          with:
            aws-region:             ${{ vars.AWS_DEFAULT_REGION }}
            role-to-assume:         ${{ secrets.AWS_OIDC_ROLE }}
            role-session-name:      ${{ github.run_id }}
            aws-access-key-id:      ${{ env.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key:  ${{ env.AWS_SECRET_ACCESS_KEY }}

        - name: Checkout
          uses: actions/checkout@v3

        - name: Copy templates to S3 artifact
          id: s3
          run: |
            aws s3 sync Templates/. s3://${{ vars.AWS_S3_ARTIFACT_BUCKET }}/

        - name: Run CloudFormation Deployment ${{ env.STACK_NAME }}
          id: deployment
          run: |
            set -eou pipefail
            function status () {
                    stack_status=$(aws cloudformation --region "$AWS_REGION" describe-stacks \
                      --stack-name "$STACK_NAME" \
                      --query Stacks[].StackStatus \
                      --output text )

                    CreationTime=$(aws cloudformation --region "$AWS_REGION" describe-stacks \
                      --stack-name "$STACK_NAME" \
                      --query Stacks[].CreationTime \
                      --output text )

                    LastUpdatedTime=$(aws cloudformation --region "$AWS_REGION" describe-stacks \
                      --stack-name "$STACK_NAME" \
                      --query Stacks[].LastUpdatedTime \
                      --output text )

                    aws cloudformation --region "$AWS_REGION" describe-stacks \
                    --stack-name "$STACK_NAME" \
                    --output json > /tmp/"${STACK_NAME}".txt

                    echo -e "\n StackStatus: $stack_status"
                    echo "DEPLOYMENT_STATUS=$stack_status"    >> $GITHUB_OUTPUT
                    echo "DEPLOYMENT_STATUS=$stack_status"    >> "$GITHUB_ENV"
                    echo "STACK_NAME=$STACK_NAME"             >> $GITHUB_OUTPUT
                    echo "STACK_NAME=$STACK_NAME"             >> "$GITHUB_ENV"
                    echo "STACK_CREATION_TIME=$CreationTime"  >> "$GITHUB_ENV"
                    echo "STACK_UPDATE_TIME=$LastUpdatedTime" >> "$GITHUB_ENV"
            }

            if ! aws cloudformation --region "$AWS_REGION" describe-stacks --stack-name "$STACK_NAME" 2>&1 ; then
                echo "Creating $STACK_NAME"
                aws cloudformation --region "$AWS_REGION" create-stack \
                --stack-name "$STACK_NAME" \
                --template-body "$TEMPLATE_FILE" \
                --parameters "$PARAMETERS_FILE" \
                --capabilities  CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND \
                --role-arn "$ROLE_ARN"

                aws cloudformation --region "$AWS_REGION" wait stack-create-complete --stack-name "$STACK_NAME"
                status
                echo "The exit status is:"
                echo  $?
            else
                echo "Updating $STACK_NAME"
                update_output=$(aws cloudformation --region "$AWS_REGION" update-stack \
                --stack-name "$STACK_NAME" \
                --template-body "$TEMPLATE_FILE" \
                --parameters "$PARAMETERS_FILE" \
                --role-arn "$ROLE_ARN" \
                --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND 2>&1 || [ $? -ne 0 ])

                echo "$update_output"
                if [[ $update_output == *"ValidationError"* && $update_output == *"No updates"* ]] ; then
                    echo "No updates to setup stack"

                status
                echo "The exit status is:"
                echo  $?

                else
                    echo "Waiting for stack update to complete"
                    aws cloudformation --region "$AWS_REGION" wait stack-update-complete --stack-name "$STACK_NAME"
                    # This just blocks forever if the previous command failed for another reason,
                    # since it never sees update stack complete

                    status
                    echo "The exit status is:"
                    echo  $?

                fi
            fi

        - name: Upload file ${{ env.STACK_NAME }}.txt
          if: always()
          uses: actions/upload-artifact@v3
          with:
            name: ${{ env.STACK_NAME }}
            path: /tmp/${{ env.STACK_NAME }}.txt
            retention-days: 5

        - name: Generate list using Markdown
          run: |
            echo "This is the Stack list with statuses:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
            echo "- The ${{ env.STACK_NAME }} status is: ${{ env.DEPLOYMENT_STATUS }}" >> $GITHUB_STEP_SUMMARY
            echo "- The ${{ env.STACK_NAME }} creation time is: ${{ env.STACK_CREATION_TIME }}" >> $GITHUB_STEP_SUMMARY
            echo "- The ${{ env.STACK_NAME }} update time is: ${{ env.STACK_UPDATE_TIME }}" >> $GITHUB_STEP_SUMMARY