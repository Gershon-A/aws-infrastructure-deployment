name: Deploy CloudFormation

on:
  workflow_call:
    inputs:
      # pass in environment through manual trigger, if not passed in, default to 'dev'
      environment:
        required: true
        type: string
        default: 'Development'
      stack-name:
        required: true
        type: string
      template:
        required: true
        type: string
      parameter-file:
        required: true
        type: string
      service-tag:
        required: true
        type: string
      capabilities:
        required: true
        type: string

    outputs:
      DEPLOYMENT_STATUS:
        description: "The first output string"
        value: ${{ jobs.TestCloudformation.outputs.DEPLOYMENT_STATUS }}
      STACK_NAME:
        description: "The first output string"
        value: ${{ jobs.TestCloudformation.outputs.STACK_NAME }}
      STACK_OUTPUT:
        description: "The first output string"
        value: ${{ jobs.TestCloudformation.outputs.STACK_OUTPUT }}

jobs:
  CloudformationDeployment:
      runs-on: ubuntu-latest
      # Must explicitly state ENVIRONMENT to inherit SECRETS from caller workflow
      environment:  ${{ inputs.environment }}
      # Map the job outputs to step outputs
      outputs:
        DEPLOYMENT_STATUS:  ${{ steps.deployment.outputs.DEPLOYMENT_STATUS }}
        STACK_NAME:         ${{ steps.deployment.outputs.STACK_NAME }}
        STACK_OUTPUT:       ${{ steps.deployment.outputs.STACK_OUTPUT }}
      # Must to be specify. Otherwise: "Could not load credentials from any providers"
      permissions:
        id-token: write
        contents: read
      steps:
        - name: Install aws-cli
          id: install-aws-cli
          uses: unfor19/install-aws-cli-action@v1
          with:
            version: 2     # default
            verbose: false # default
            arch: amd64    # allowed values: amd64, arm64
            rootdir: ""    # defaults to "PWD"
            workdir: ""    # defaults to "PWD/unfor19-awscli"

        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v1-node16
          with:
            aws-region:             ${{ secrets.AWS_DEFAULT_REGION }}
            role-to-assume:         ${{ secrets.AWS_OIDC_ROLE }}
            role-session-name:      TTM4J-GithubActions
            aws-access-key-id:      ${{ env.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key:  ${{ env.AWS_SECRET_ACCESS_KEY }}

        - name: Checkout
          uses: actions/checkout@v3
          with:
            ref: 'ci-cd'

        - name: Run CloudFormation Deployment ${{ inputs.stack-name }}
          id: deployment
          env:
            STACK_NAME:         ${{ inputs.stack-name }}
            TEMPLATE_FILE:      "file://${{ inputs.template }}"
            PARAMETERS_FILE:    "file://TemplateConfigs/${{ secrets.USECASE }}-${{ inputs.parameter-file }}-${{ secrets.AWS_DEFAULT_REGION }}.json"
            AWS_REGION:         ${{ secrets.AWS_DEFAULT_REGION }}
            PARAMETER_OVERRIDE: "usecase=${{ secrets.USECASE }}"
            CAPABILITIES:       "${{ inputs.capabilities }}"
            #  (IAM) role that CloudFormation assumes to create the stack.
            ROLE_ARN:           "${{ secrets.AWS_CFN_ROLE_TO_ASSUME }}"
            TAGS:               "Service=${{ inputs.service-tag }} Env=${{ secrets.USECASE }}"
          run: |
            set -eou pipefail
            if ! aws cloudformation --region $AWS_REGION describe-stacks --stack-name $STACK_NAME 2>&1 ; then
                echo "Creating $STACK_NAME"
                aws cloudformation --region $AWS_REGION create-stack --stack-name $STACK_NAME --template-body $TEMPLATE_FILE --parameters $PARAMETERS_FILE
                aws cloudformation --region $AWS_REGION wait stack-create-complete --stack-name $STACK_NAME
            else
                echo "Updating $STACK_NAME"
                update_output=$(aws cloudformation --region $AWS_REGION update-stack --stack-name $STACK_NAME --template-body $TEMPLATE_FILE --parameters $PARAMETERS_FILE --capabilities CAPABILITY_IAM 2>&1 || [ $? -ne 0 ])
                echo $update_output
                if [[ $update_output == *"ValidationError"* && $update_output == *"No updates"* ]] ; then
                    echo "No updates to setup stack"
                else
                    echo "Waiting for stack update to complete"
                    aws cloudformation --region $AWS_REGION wait stack-update-complete --stack-name $STACK_NAME
                    # This just blocks forever if the previous command failed for another reason,
                    # since it never sees update stack complete
                fi
